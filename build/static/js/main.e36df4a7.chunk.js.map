{"version":3,"sources":["accessories/colorConversion.js","components/ColorPreview.js","components/wheel.js","components/ColorWheel.js","components/HslSliders.js","components/Harmonic.js","accessories/copyToClipboard.js","components/Shading.js","components/ColorPalette.js","components/RgbSliders.js","ColorTools.js","serviceWorker.js","index.js"],"names":["rgb2hsl","r","g","b","h","s","l","d","min","max","Math","abs","toFixed","rgb2hex","c","map","item","toString","length","join","toUpperCase","hsl2rgb","x","m","round","hex2rgb","hex","concat","parseInt","substring","hex2hsl","apply","Object","toConsumableArray","hsl2hex","hueReset","hue","ColorPreview","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","iChange","e","persist","input","target","value","newColor","colorTest","id","document","querySelector","innerText","updateBaseColor","iFocus","select","buffer","getData","type","colorData","backgroundColor","cConvert","state","baseColor","color","updateInputs","keys","forEach","copyColor","elementToCopy","replace","copyIconElement","hslElement","hslElementOriginalValue","hslArray","execCommand","setTimeout","hexInput","hslInput","rgbInput","match","tempColor","filter","Boolean","colorHelp","_this2","react_default","a","createElement","style","key","htmlFor","size","onChange","onFocus","onBlur","role","arei-label","aria-hidden","title","onClick","Component","cWheel","width","colorCanvas","colorCanvasUI","updateFunction","drawInnerBox","baseHue","arguments","undefined","baseColorHSL","row","topY","bottomY","rowPercent","boxGradient","ctx","createLinearGradient","leftX","rightX","i","addColorStop","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","drawOuterWheel","segments","theta0","theta1","rad0","PI","rad1","x1","wheelRadius","cos","y1","height","sin","x2","y2","gradient","arc","drawOutput","output","Number","updateSelectedColor","baseColorHEX","ctxUI","textAlign","font","outerWheelThickness","fillStyle","selectorLineWidth","strokeText","textX","textY","fillText","drawSelectors","selectors","wheelSelector","boxSelector","clearRect","selectedColor","externalInput","calculateWheelSelectorPosition","calculateBoxSelectorPosition","getNearestPointInBox","y","getNearestPointOnWheel","atan","mouseData","touches","rect","getBoundingClientRect","targetTouches","pageX","left","pageY","top","offsetX","offsetY","xDist","yDist","dist","sqrt","pow","mouseDown","preventDefault","focus","selfInvoked","innerRadius","outerRadius","activeSelector","mouseMove","buttons","mouseUp","position","marginLeft","zIndex","getContext","boxWidth","boxHeight","ceil","init","theta","ColorWheel","colorWheel","Fragment","tabIndex","outline","addEventListener","passive","HslSliders","cFocus","colorVar","substr","cChange","nativeEvent","data","slice","inputType","inputs","indexOf","setSliders","componentDidUpdate","className","name","Harmonic","updateState","newState","setState","paletteBoxClick","copyString","ctrlKey","str","el","setAttribute","body","appendChild","selected","getSelection","rangeCount","getRangeAt","removeChild","removeAllRanges","addRange","copyToClipboard","settings","Palette Mode","Analogous","Complementary","Complementary split","Complementary with split","Tetradic rectangle","Tetradic square","Triadic","Saturation Steps","Luminosity Steps","Copied format","hsl","rgb","f","checked","values","globalState","Array","fill","j","saturation","k","luminosity","clipBoardString","Shading","_Component","inherits","createClass","ColorPalette","mode","modes","Harmonic_Harmonic","paletteState","RgbSliders","baseColorRGB","onInput","ColorTools","textColor","ColorPreview_ColorPreview","ColorWheel_ColorWheel","HslSliders_HslSliders","RgbSliders_RgbSliders","ColorPalette_ColorPalette","window","location","hostname","ReactDOM","render","ColorTools_ColorTools","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e36df4a7.chunk.js","sourcesContent":["export function rgb2hsl (r,g,b) {\r\n    r=r/255; g=g/255; b=b/255;\r\n    let h,s,l,d,min,max = null;\r\n    max=Math.max(r,g,b);\r\n    min=Math.min(r,g,b);\r\n    d=max-min;\r\n    l=(max+min);\r\n    if (max===r) { h = 60*(((g-b)/d)%6); }\r\n    if (max===g) { h = 60*(((b-r)/d)+2); }\r\n    if (max===b) { h = 60*(((r-g)/d)+4); }\r\n    if (d===0) { h=0; s=0; }\r\n    if (h<0) { h=h+360; }\r\n    if (d!==0) { s=d/(1-Math.abs(l-1)); }\r\n    h = h.toFixed(2);\r\n    s = (s*100).toFixed(2);\r\n    l = (l*50).toFixed(2);\r\n    return [h,s,l];\r\n}\r\nexport function rgb2hex (r, g, b) {\r\n    let c = [r,g,b];\r\n    c = \"#\" + c.map(\r\n        function(item){\r\n            return item.toString(16);\r\n        }).map(\r\n        function(item){\r\n            if(item.length===1){return \"0\" + item;}\r\n            else {return(item);}\r\n        }).join(\"\").toUpperCase();\r\n    return c;\r\n}\r\nexport function hsl2rgb (h,s,l) {\r\n    s=s/100;\r\n    l=l/100;\r\n    let c=(1-Math.abs((2*l)-1))*s;\r\n    let x=c*(1-Math.abs(((h/60)%2)-1));\r\n    let m=l-c/2;\r\n    let r,g,b;\r\n    if (h<60|h===360) {r=c;g=x;b=0;}\r\n    else if (h<120)\t{r=x;g=c;b=0}\r\n    else if (h<180)\t{r=0;g=c;b=x}\r\n    else if (h<240) {r=0;g=x;b=c}\r\n    else if (h<300) {r=x;g=0;b=c}\r\n    else if (h<360)\t{r=c;g=0;b=x}\r\n    r=Math.round((r+m)*255);g=Math.round((g+m)*255);b=Math.round((b+m)*255);\r\n    return [r,g,b];\t\r\n}\r\nexport function hex2rgb (hex) {\r\n    hex = (hex[0]===\"#\") ? hex : `#${hex}`;\r\n    let r = parseInt(hex.substring(1,3),16);\r\n    let g = parseInt(hex.substring(3,5),16);\r\n    let b = parseInt(hex.substring(5,7),16);\r\n    return [r,g,b];\r\n}\r\nexport function hex2hsl (hex) {\r\n    return rgb2hsl(...hex2rgb(hex));\r\n}\r\nexport function hsl2hex(h,s,l) {\r\n\treturn rgb2hex(...hsl2rgb(h,s,l));\r\n}\r\nexport function hueReset(hue) {\r\n    while (hue >= 360) {\r\n        hue = hue - 360;\r\n    }\r\n    return hue;\r\n}","import React, { Component } from 'react'\r\nimport * as cConvert from '../accessories/colorConversion';\r\nimport '../components/ColorPreview.css';\r\n\r\nexport default class ColorPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buffer=[];\r\n        this.colorData={\r\n            \"hexInput\":()=>cConvert.hsl2hex(...this.props.state.baseColor),\r\n            \"hslInput\":()=>this.props.state.baseColor.join(\", \"),\r\n            \"rgbInput\":()=>cConvert.hsl2rgb(...this.props.state.baseColor).join(\", \")\r\n        };\r\n        this.colorTest={\r\n            \"hexInput\":(input)=>{\r\n                return (input.match(/^#{0,1}[0-9a-f]{6}$/i)) ? cConvert.hex2hsl(input) : null;\r\n            },\r\n            \"hslInput\":(input)=>{\r\n                let tempColor = input.match(/(\\d*\\.{0,1}\\d*)/g);\r\n                tempColor = (tempColor) ? tempColor.filter(Boolean) : \"\"; \r\n                if (tempColor.length===3 && tempColor[0]<360 && tempColor[1]<=100 && tempColor[2]<=100) {\r\n                    return [tempColor[0],tempColor[1],tempColor[2]];\r\n                }\r\n            },\r\n            \"rgbInput\":(input)=>{\r\n                let tempColor = input.match(/\\d{1,3}/g);\r\n                tempColor = (tempColor) ? tempColor.filter(Boolean) : \"\";\r\n                if (tempColor.length===3 && tempColor[0]<=255 && tempColor[1]<=255 && tempColor[2]<=255) {\r\n                    return cConvert.rgb2hsl(tempColor[0],tempColor[1],tempColor[2]);\r\n                }\r\n            }\r\n        }\r\n        this.colorHelp={\r\n            \"hexInput\":\"enter six-digit hexidecimal values with no spaces, # prefix is optional\",\r\n            \"hslInput\":\"enter three values separated by spaces or commas, first value is hue and must be less than 360, second value is saturation and must be less than or equal to 100, third value is luminosity and must be less than or equal to 100. Decimals values can be used\",\r\n            \"rgbInput\":\"enter three values separated by spaces or commas, each value must be less than or equal to 255\"\r\n        }\r\n    } \r\n    iChange = (e) => {\r\n        e.persist();\r\n        let input = e.target.value;\r\n        let newColor = this.colorTest[e.target.id](input);\r\n        if (newColor) {\r\n            document.querySelector(`#${e.target.id}Help`).innerText = \"❔\";\r\n            this.props.updateBaseColor(newColor);\r\n        }\r\n        else {\r\n            document.querySelector(`#${e.target.id}Help`).innerText = \"❓\";\r\n        }\r\n\r\n    }\r\n    iFocus = (e) => {\r\n        e.target.select();\r\n        this.buffer = [e.target.id,e.target.value];\r\n    }\r\n\r\n    getData = (type) => { \r\n        if (typeof this.colorData[type] === \"function\") { return this.colorData[type]() }\r\n        if (type === \"style\") {\r\n            return ({\r\n                backgroundColor:cConvert.hsl2hex(...this.props.state.baseColor),\r\n                color:(this.props.state.baseColor[2]>45)?\"black\":\"white\",\r\n            });\r\n        }\r\n    }\r\n    updateInputs = () => {\r\n        Object.keys(this.colorData).forEach(e=>{\r\n            if (this.buffer[0]!==e) {\r\n                document.querySelector(`#${e}`).value = this.getData(e);\r\n                document.querySelector(`#${e}Help`).innerText = \"❔\";\r\n            }\r\n        })\r\n    }\r\n    copyColor = (e) => {\r\n        let elementToCopy = `#${e.target.id.replace(\"Copy\",\"\")}`;\r\n        let copyIconElement = `#${e.target.id}`;\r\n        if (elementToCopy[2] === \"s\") {\r\n            let hslElement = document.querySelector(elementToCopy);\r\n            let hslElementOriginalValue = hslElement.value;\r\n            let hslArray = this.colorTest[\"hslInput\"](hslElement.value);\r\n            hslElement.value = `${hslArray[0]},${hslArray[1]}%,${hslArray[2]}%`;\r\n            hslElement.select();\r\n            document.execCommand(\"copy\");\r\n            hslElement.value = hslElementOriginalValue;\r\n        }\r\n        else {\r\n            document.querySelector(elementToCopy).select();\r\n            document.execCommand(\"copy\");\r\n        }\r\n        document.querySelector(copyIconElement).innerText = \"✔️\";\r\n        setTimeout(()=>{document.querySelector(copyIconElement).innerText = \"📋\"},500);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div id=\"colorOutput\" style={this.getData(\"style\")}>\r\n                {Object.keys(this.colorData).map(e=>\r\n                    <p key={e}>\r\n                    <label htmlFor={e}>{e.replace(\"Input\",\":\")} \r\n                    <input id={e} type=\"text\" size=\"16\" onChange={this.iChange} onFocus={this.iFocus} onBlur={()=>{this.buffer=[]}} style={this.getData(\"style\")} />\r\n                    <span role=\"img\" arei-label=\"help\" aria-hidden=\"true\" id={`${e}Help`} title={this.colorHelp[e]}>❔</span>\r\n                    <span role=\"img\" arei-label=\"copy\" aria-hidden=\"true\" id={`${e}Copy`} title=\"copy\" onClick={this.copyColor}>📋</span>\r\n                    </label>\r\n                    </p>\r\n                )}\r\n          </div>\r\n          </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.updateInputs();\r\n    }\r\n    componentDidUpdate() {\r\n        this.updateInputs();\r\n    }\r\n}","import * as cConvert from '../accessories/colorConversion';\r\nexport default class cWheel {\r\n    constructor(width,baseColor,colorCanvas,colorCanvasUI,updateFunction) {\r\n        this.baseColorHSL = baseColor;\r\n        this.h = baseColor[0];\r\n        this.s = baseColor[1];\r\n        this.l = baseColor[2];\r\n        this.baseColorHEX = cConvert.hsl2hex(baseColor);\r\n        this.updateSelectedColor = updateFunction;\r\n        this.colorCanvas = colorCanvas;\r\n        this.colorCanvasUI = colorCanvasUI;\r\n        this.width = width;\r\n        this.height = width; //must be a square\r\n        this.colorCanvas.width = this.width;\r\n        this.colorCanvas.height = this.height;\r\n        this.colorCanvasUI.width = this.width;\r\n        this.colorCanvasUI.height = this.height;\r\n        this.colorCanvasUI.style.position = 'relative';\r\n        this.colorCanvasUI.style.marginLeft = `-${this.width}px`;\r\n        this.colorCanvas.style.zIndex = '0';\r\n        this.colorCanvasUI.style.zIndex = '1';\r\n        this.ctx = this.colorCanvas.getContext(\"2d\");\r\n        this.ctxUI = this.colorCanvasUI.getContext(\"2d\");\r\n        this.outerWheelThickness = this.width/15;\r\n        this.ctx.lineWidth = this.outerWheelThickness;\r\n        this.wheelRadius = (this.width/2)-this.outerWheelThickness/2;\r\n        this.innerRadius = this.wheelRadius - this.outerWheelThickness/2;\r\n        this.outerRadius = this.wheelRadius + this.outerWheelThickness/2;\r\n        this.boxWidth = 2*(this.wheelRadius-(this.outerWheelThickness/2))/Math.sqrt(2)-2;\r\n        this.boxHeight = this.boxWidth;\r\n        this.leftX = (this.width/2)-(this.boxWidth/2);\r\n        this.topY = (this.height/2)-(this.boxHeight/2);\r\n        this.rightX = this.leftX+this.boxWidth;\r\n        this.bottomY = (this.height/2)+(this.boxHeight/2);\r\n        this.calculateWheelSelectorPosition(this.baseColorHSL);\r\n        this.calculateBoxSelectorPosition(this.baseColorHSL);\r\n        this.activeSelector = \"wheel\";\r\n        this.selectedColor = this.baseColorHSL; \r\n        this.selectorLineWidth = Math.ceil(this.outerWheelThickness/12);\r\n        this.textX = this.width/2;\r\n        this.textY = this.bottomY + this.outerWheelThickness*1.2;\r\n        this.selfInvoked = false;\r\n        this.init = (() => { \r\n            this.drawOuterWheel();this.drawInnerBox(); this.drawSelectors();\r\n        })();\r\n    };\r\n    calculateBoxSelectorPosition(color) {\r\n        let x = this.leftX + this.boxWidth * this.l/100;\r\n        let y = this.topY + this.boxHeight * this.s/100;\r\n        this.boxSelector = [x,y];\r\n    }\r\n    calculateWheelSelectorPosition(color) {\r\n        let r = this.wheelRadius;\r\n        let theta = color[0]*Math.PI/180;\r\n        let x = r*Math.cos(theta)+(this.width/2);\r\n        let y = -r*Math.sin(theta)+(this.height/2);\r\n        this.wheelSelector = [x,y];\r\n    }\r\n    drawInnerBox = (baseHue=this.baseColorHSL[0]) => {\r\n        for (let row = this.topY; row <= this.bottomY; row++) { \r\n            let rowPercent = 100*(row-this.topY)/(this.bottomY-this.topY);\r\n            let boxGradient = this.ctx.createLinearGradient(this.leftX,row,this.rightX,row);\r\n            let steps = 3; //adding more steps may improve appearance at the cost of performance on slower devices\r\n            for (let i=0; i<=steps; i++) { \r\n                boxGradient.addColorStop(i/steps,`hsla(${baseHue},${rowPercent}%,${100*i/steps}%,1)`);\r\n            }\r\n            this.ctx.strokeStyle = boxGradient;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.leftX,row);\r\n            this.ctx.lineTo(this.rightX,row);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n    }\r\n    drawOuterWheel = (segments=12) => { \r\n        for (let i=0; i<segments; i++) {\r\n            let theta0 = i*360/segments;\r\n            let theta1 = (i+1)*360/segments;\r\n            let rad0 = theta0*Math.PI/180 - .01; // - .01 hides the gaps\r\n            let rad1 = theta1*Math.PI/180;\r\n            let x1 = this.wheelRadius*Math.cos(rad0)+(this.width/2); \r\n            let y1 = this.height - (this.wheelRadius*Math.sin(rad0)+(this.height/2)); \r\n            let x2 = this.wheelRadius*Math.cos(rad1)+(this.width/2);\r\n            let y2 = this.height - (this.wheelRadius*Math.sin(rad1)+(this.height/2));\r\n            let gradient = this.ctx.createLinearGradient(x1,y1,x2,y2); \r\n            gradient.addColorStop(0,`hsla(${theta0},100%,50%,1)`);\r\n            gradient.addColorStop(1,`hsla(${theta1},100%,50%,1)`);\r\n            this.ctx.strokeStyle = gradient;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(this.width/2,this.height/2,this.wheelRadius,2*Math.PI-(rad0),2*Math.PI-(rad1),true);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n    }\r\n    drawOutput = (output) => {\r\n        output.forEach((e,i,a)=>a[i]=Number(a[i]).toFixed(2));\r\n        this.updateSelectedColor(output);\r\n        this.baseColorHEX = cConvert.hsl2hex(...output);\r\n        this.ctxUI.textAlign = 'center';\r\n        this.ctxUI.font = `${this.outerWheelThickness}px monospace`;\r\n        this.ctxUI.fillStyle = 'white';\r\n        this.ctxUI.strokeStyle = 'black';\r\n        this.ctxUI.lineWidth = this.selectorLineWidth+1;\r\n        this.ctxUI.strokeText(this.baseColorHEX, this.textX, this.textY);\r\n        this.ctxUI.fillText(this.baseColorHEX, this.textX, this.textY);\r\n    }\r\n    drawSelectors = () => {\r\n        let selectors = [[this.wheelSelector[0],this.wheelSelector[1]],[this.boxSelector[0],this.boxSelector[1]]];\r\n        this.ctxUI.clearRect(0,0,this.width,this.height);\r\n        selectors.forEach(e=> {\r\n            this.ctxUI.moveTo(e[0],e[1]);\r\n            this.ctxUI.beginPath();\r\n            this.ctxUI.lineWidth = this.selectorLineWidth;\r\n            this.ctxUI.strokeStyle = \"#252525\";\r\n            this.ctxUI.arc(e[0],e[1],this.width/30,0,2*Math.PI);\r\n            this.ctxUI.stroke();\r\n            this.ctxUI.closePath();\r\n            this.ctxUI.beginPath();\r\n            this.ctxUI.lineWidth = this.selectorLineWidth;\r\n            this.ctxUI.strokeStyle = \"white\";\r\n            this.ctxUI.arc(e[0],e[1],this.width/30-this.selectorLineWidth,0,2*Math.PI);\r\n            this.ctxUI.stroke();\r\n            this.ctxUI.closePath();\r\n        });\r\n        this.drawOutput(this.selectedColor);\r\n    }\r\n    externalInput = (color) => {\r\n        this.h = color[0];\r\n        this.s = color[1];\r\n        this.l = color[2];\r\n        this.baseColorHSL = color;\r\n        this.baseColorHEX = cConvert.hsl2hex(color);\r\n        this.selectedColor = color;\r\n        this.calculateWheelSelectorPosition(color);\r\n        this.calculateBoxSelectorPosition(color);\r\n        this.drawInnerBox(this.baseColorHSL[0]);\r\n        this.drawSelectors();\r\n    }\r\n    getNearestPointInBox = (x,y) => {\r\n        if (x<this.leftX) { this.x = this.leftX };\r\n        if (x>this.rightX) { this.x = this.rightX };\r\n        if (y<this.topY) { this.y = this.topY };\r\n        if (y>this.bottomY) { this.y = this.bottomY };\r\n        this.s = 100*(this.y-this.topY)/(this.bottomY-this.topY);\r\n        this.l = 100*(this.x-this.leftX)/(this.rightX-this.leftX);\r\n        this.boxSelector = [this.x,this.y];\r\n    }\r\n    getNearestPointOnWheel = (x,y,d) => {\r\n        this.h = (180/Math.PI)*Math.atan(y/x);\r\n        if (x < 0) { this.h = this.h + 180; }\r\n        if (y < 0) { this.h = this.h + 360; }\r\n        this.h = 360-this.h;\r\n        if (this.h<0) { this.h = 360+this.h }\r\n        if (this.h===360) { this.h = 0; }\r\n        x = (this.width/2) + this.wheelRadius*x/d;\r\n        y = (this.width/2) + this.wheelRadius*y/d;\r\n        this.wheelSelector = [x,y];\r\n    }\r\n    mouseData = (e) => {\r\n        if (e.touches) {\r\n            let rect = e.target.getBoundingClientRect();\r\n            this.x = e.targetTouches[0].pageX - rect.left;\r\n            this.y = e.targetTouches[0].pageY - rect.top;\r\n        }\r\n        else {\r\n            this.x = e.offsetX;\r\n            this.y = e.offsetY;\r\n        }\r\n        this.xDist = this.x - this.width/2;\r\n        this.yDist = this.y - this.height/2;\r\n        this.dist = Math.sqrt(this.xDist**2 + this.yDist**2);\r\n    }\r\n    mouseDown = (e) => {\r\n        e.preventDefault();\r\n        document.querySelector(\"#colorCanvasUI\").focus();\r\n        this.selfInvoked = true;\r\n        this.mouseData(e);\r\n        if (this.dist > this.innerRadius && this.dist < this.outerRadius) { \r\n            this.activeSelector = \"wheel\";\r\n            this.mouseMove(e);\r\n        }\r\n        else if (this.x>this.leftX && this.x<this.rightX && this.y>this.topY && this.y<this.bottomY) { \r\n            this.activeSelector = \"box\";\r\n            this.mouseMove(e);\r\n        }\r\n        else { this.activeSelector = null; }\r\n    }\r\n    mouseMove = (e) => {\r\n        if (e.buttons === 0 || this.activeSelector === \"null\") { return; }\r\n        this.mouseData(e);\r\n        if (this.activeSelector === \"wheel\") {\r\n            this.getNearestPointOnWheel(this.xDist,this.yDist,this.dist);\r\n            this.drawInnerBox(this.h);\r\n        }\r\n        if (this.activeSelector === \"box\") { \r\n            this.getNearestPointInBox(this.x,this.y);\r\n        }\r\n        this.selectedColor = [this.h,this.s,this.l];\r\n        this.drawSelectors();\r\n    }\r\n    mouseUp = () => {\r\n        this.updateSelectedColor(this.selectedColor);\r\n        this.activeSelector = null;\r\n        this.selfInvoked = false;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport cWheel from './wheel';\r\n//todo: \"copy\"/\"OK\"/\"close\" buttons\r\n//todo: preview box in top left\r\nexport default class ColorWheel extends Component {\r\n\r\n    updateSelectedColor = (color) => { \r\n        if (color === this.props.state.baseColor) { return; }\r\n        this.props.updateBaseColor(color);\r\n    }\r\n    componentDidUpdate() {\r\n        if(this.colorWheel.selfInvoked === false) {\r\n            this.colorWheel.externalInput(this.props.state.baseColor);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div id=\"canvasContainer\">\r\n                <canvas id=\"colorCanvas\"></canvas>\r\n                <canvas id=\"colorCanvasUI\" tabIndex=\"1\" style={{outline:\"none\"}}></canvas>\r\n            </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n    componentDidMount() {\r\n        let colorCanvas = document.querySelector(\"#colorCanvas\");\r\n        let colorCanvasUI = document.querySelector(\"#colorCanvasUI\");\r\n        this.colorWheel = new cWheel(this.props.state.width,this.props.state.baseColor,colorCanvas,colorCanvasUI,this.updateSelectedColor);\r\n        colorCanvasUI.addEventListener(\"mousedown\",this.colorWheel.mouseDown);\r\n        colorCanvasUI.addEventListener(\"mousemove\",this.colorWheel.mouseMove);\r\n        colorCanvasUI.addEventListener(\"mouseup\",this.colorWheel.mouseUp);\r\n        colorCanvasUI.addEventListener(\"touchstart\",this.colorWheel.mouseDown,{ passive: false });\r\n        colorCanvasUI.addEventListener(\"touchmove\",this.colorWheel.mouseMove,{ passive: false });\r\n        colorCanvasUI.addEventListener(\"touchend\",this.colorWheel.mouseUp);\r\n\r\n    }\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport '../components/colorSliders.css';\r\n\r\nexport default class HslSliders extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputs = {\r\n            \"h\":359.99,\r\n            \"s\":100,\r\n            \"l\":100\r\n        };\r\n        this.buffer = [];\r\n    }\r\n    cFocus = (e) => {\r\n        e.target.select();\r\n        const colorVar = e.target.id.substr(0,1);\r\n        this.buffer = [colorVar,e.target.value];\r\n    }\r\n    cChange = (e) => {\r\n        e.persist();\r\n        const colorVar = e.target.id.substr(0,1); \r\n        const key = e.nativeEvent.data;\r\n        let value = e.target.value;\r\n        const newColor = this.props.state.baseColor.slice();    \r\n        if ((key === null || value === null) && e.nativeEvent.inputType.substr(0,6)!==\"delete\") {return;}\r\n        if (e.target.type === \"text\") {\r\n            value = value.replace(/\\./,\"[dec]\").replace(/\\./g,\"\").replace(\"[dec]\",\".\").replace(/[^\\d.]/g,\"\");\r\n            if (value >= this.inputs[colorVar]) value = this.inputs[colorVar];\r\n            this.buffer=[colorVar,value];\r\n            e.target.value = this.buffer[1];\r\n        }\r\n        if (value) {\r\n            newColor[\"hsl\".indexOf(colorVar)] = Number(value);\r\n            this.props.updateBaseColor(newColor);\r\n        }\r\n    }\r\n\r\n    setSliders = () => {\r\n        [\"h\",\"s\",\"l\"].forEach((e,i)=>{\r\n            const value = (e===this.buffer[0]) ? this.buffer[1] : this.props.state.baseColor[i];\r\n            document.querySelector(`#${e}r`).value = Number(value);\r\n            document.querySelector(`#${e}t`).value = value;\r\n            }\r\n        );\r\n    }\r\n    componentDidUpdate = () => {\r\n        this.setSliders();\r\n    }\r\n    render() {\r\n        return (\r\n                <div className=\"colorInputBox\">\r\n                    <p>hue, saturation, luminosity</p>\r\n                {Object.keys(this.inputs).map(e=>\r\n                        <div className=\"colorInputRow\" key={e[0]}>\r\n                        <label htmlFor={`${e}t`}>{e} \r\n                        <input name={`${e}t`} id={`${e}r`}  type=\"range\" min=\"0\" max={this.inputs[e]} onChange={this.cChange}/>\r\n                        <input type=\"text\" id={`${e}t`} min=\"0\" max={this.inputs[e]} size=\"4\" onChange={this.cChange} onFocus={this.cFocus} onBlur={()=>this.buffer=[]}/>\r\n                        </label>\r\n                        </div>\r\n                    )\r\n                }\r\n                </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.setSliders();\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport * as cConvert from '../accessories/colorConversion';\r\nimport copyToClipboard from '../accessories/copyToClipboard';\r\n\r\nexport default class Harmonic extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.settings = {\r\n            \"Palette Mode\": {\r\n                type: \"list\",\r\n                \"Analogous\": [0,30,330],\r\n                \"Complementary\": [0,180],\r\n                \"Complementary split\": [0,150,210],\r\n                \"Complementary with split\": [0,150,180,210],\r\n                \"Tetradic rectangle\": [0,30,60,210,240],\r\n                \"Tetradic square\": [0,90,180,270],\r\n                \"Triadic\": [0,120,240],\r\n                // \"Custom\": []\r\n            },\r\n            \"Saturation Steps\": {\r\n                type: \"range\",\r\n                min: 1,\r\n                max: 7\r\n            },\r\n            \"Luminosity Steps\": {\r\n                type: \"range\",\r\n                min: 1,\r\n                max: 7\r\n            },\r\n            \"Copied format\": {\r\n                type: \"list\",\r\n                \"hex\":(color)=>{return cConvert.hsl2hex(...color)},\r\n                \"hsl\":(color)=>{return `${color[0]},${color[1]}%,${color[2]}%`},\r\n                \"rgb\":(color)=>{return cConvert.hsl2rgb(...color)},\r\n            }\r\n        }\r\n        this.state = {\r\n            \"Palette Mode\": \"Analogous\",\r\n            \"Saturation Steps\": 4,\r\n            \"Luminosity Steps\": 4,\r\n            \"Copied format\": \"hex\"\r\n        }\r\n    }\r\n    updateState = (e) => {\r\n        e.persist();\r\n        let newState = this.state;\r\n        let value = e.target.value;\r\n        if (value.match(/\\d+/g)) { value = Number(value) }\r\n        newState[e.target.name] = value;\r\n        this.setState(newState);\r\n    }\r\n    paletteBoxClick = (e,copyString,hslArray) => {\r\n        e.persist();\r\n        (e.ctrlKey) ? this.props.updateBaseColor(hslArray) : copyToClipboard(copyString);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>harmonic color palettes</h3>\r\n                <div className=\"paletteSettings\">\r\n                    {Object.keys(this.state).map(e=>\r\n                        <div key={`set${e}`} className={`paletteSetting`}>\r\n                        <span className=\"paletteSettingLabel\">{e}</span>\r\n                            {(this.settings[e].type === \"list\") ? \r\n                                Object.keys(this.settings[e]).map((f,i)=>{\r\n                                    if (i===0) { return null }\r\n                                    else { \r\n                                        return (\r\n                                            <span key={f} className=\"paletteInputRadioBlock\">\r\n                                                <input \r\n                                                    id={f} \r\n                                                    name={e} \r\n                                                    value={f} \r\n                                                    type=\"radio\" \r\n                                                    onChange={this.updateState}\r\n                                                    checked={(f===this.state[e]) ? true : false}\r\n                                                />\r\n                                                <label key={f} htmlFor={f} className=\"paletteInputRadio\">{f}</label>\r\n                                            </span>\r\n                                        );\r\n                                    }\r\n                                })\r\n                                : \r\n                                <React.Fragment>\r\n                                    <span className=\"paletteInputRangeBlock\">({this.state[e]})\r\n                                    <input \r\n                                        type=\"range\" \r\n                                        name={e} \r\n                                        min={this.settings[e][\"min\"]} \r\n                                        max={this.settings[e][\"max\"]} \r\n                                        value={this.state[e]} \r\n                                        onChange={this.updateState}\r\n                                    />\r\n                                    </span>\r\n                                </React.Fragment>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"paletteContainer\">\r\n                    {Object.values(this.settings[\"Palette Mode\"][this.state[\"Palette Mode\"]]).map((h,i)=>{\r\n                        let hue = cConvert.hueReset(Number(this.props.globalState.baseColor[0])+h).toFixed(2);\r\n                        return (\r\n                        <div key={`h${i}`} className=\"paletteBlock\">\r\n                        \r\n                        {Array(this.state[\"Saturation Steps\"]).fill(\"0\").map((s,j)=>{\r\n                            let saturation = Number(100*(j+1)/this.state[\"Saturation Steps\"]).toFixed(2);\r\n                            return (\r\n                            <div key={`h${i}s${j}`} className=\"paletteRow\">\r\n                                \r\n                                {Array(this.state[\"Luminosity Steps\"]).fill(\"0\").map((l,k)=> {\r\n                                    let luminosity = Number(100*(k+1)/(1+this.state[\"Luminosity Steps\"])).toFixed(2);\r\n                                    let clipBoardString = this.settings[\"Copied format\"][this.state[\"Copied format\"]]([hue,saturation,luminosity]);\r\n                                    return(<div \r\n                                        key={`h${i}s${j}l${k}`}\r\n                                        className=\"paletteBox\"\r\n                                        style={{backgroundColor:`hsl(${hue},${saturation}%,${luminosity}%)`}}\r\n                                        title={`click to copy:\\n${clipBoardString}`}\r\n                                        onClick={(e)=>{this.paletteBoxClick(e,clipBoardString,[hue,saturation,luminosity])}}\r\n                                    >\r\n                                    </div>);\r\n                                })}\r\n\r\n                            </div>\r\n                            );    \r\n                        })}\r\n                        \r\n                        </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","//obtained from https://gist.github.com/Chalarangelo/4ff1e8c0ec03d9294628efbae49216db#file-copytoclipboard-js\r\nexport default function copyToClipboard (str) {\r\n    const el = document.createElement('textarea');  // Create a <textarea> element\r\n    el.value = str;                                 // Set its value to the string that you want copied\r\n    el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n    el.style.position = 'absolute';                 \r\n    el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n    document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n    const selected =            \r\n        document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n        ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n        : false;                                    // Mark as false to know no selection existed before\r\n    el.select();                                    // Select the <textarea> content\r\n    document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n    document.body.removeChild(el);                  // Remove the <textarea> element\r\n    if (selected) {                                 // If a selection existed before copying\r\n        document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n        document.getSelection().addRange(selected);   // Restore the original selection\r\n    }\r\n};","import React, { Component } from 'react'\r\n\r\nexport class Shading extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h3>shading color palette</h3>\r\n                \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Shading\r\n","import React, { Component } from 'react'\r\nimport Harmonic from './Harmonic';\r\nimport Shading from './Shading';\r\nimport './ColorPalette.css';\r\n\r\nexport default class ColorPalette extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            mode: Shading,\r\n            modes: [Harmonic, Shading]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Harmonic paletteState={this.state} globalState={this.props.state} updateBaseColor={this.props.updateBaseColor} />\r\n                {/* {React.createElement(this.state.mode,{paletteState:this.state,globalState:this.props.state,updateBaseColor:this.props.updateBaseColor})} */}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {rgb2hsl,hsl2rgb} from '../accessories/colorConversion';\r\n\r\nexport default class RgbSliders extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputs = {\r\n            \"r\":255,\r\n            \"g\":255,\r\n            \"b\":255,\r\n        };\r\n        this.buffer = [];\r\n    }\r\n    cFocus = (e) => {\r\n        e.target.select();\r\n        const colorVar = e.target.id.substr(0,1);\r\n        this.buffer = [colorVar,e.target.value];\r\n    }\r\n    cChange = (e) => {\r\n        e.persist();\r\n        const colorVar = e.target.id.substr(0,1); \r\n        const key = e.nativeEvent.data;\r\n        let value = e.target.value;\r\n        const newColor = this.baseColorRGB.slice();    \r\n        if ((key === null || value === null) && e.nativeEvent.inputType.substr(0,6)!==\"delete\") {return;}\r\n        if (e.target.type === \"text\") {\r\n            value = value.replace(/\\./,\"\").replace(/[\\D]/g,\"\");\r\n            if (value >= this.inputs[colorVar]) value = this.inputs[colorVar];\r\n            this.buffer=[colorVar,value];\r\n            e.target.value = this.buffer[1];\r\n        }\r\n        if (value) {\r\n            newColor[\"rgb\".indexOf(colorVar)] = Number(value);\r\n            this.props.updateBaseColor(rgb2hsl(...newColor));\r\n        }\r\n\r\n    }\r\n\r\n    setSliders = () => {\r\n        this.baseColorRGB = hsl2rgb(...this.props.state.baseColor);\r\n        [\"r\",\"g\",\"b\"].forEach((e,i)=>{\r\n            document.querySelector(\"#\"+e+\"r\").value = this.baseColorRGB[i];\r\n            document.querySelector(\"#\"+e+\"t\").value = this.baseColorRGB[i];\r\n            }\r\n        );\r\n    }\r\n    componentDidUpdate = () => {\r\n        this.setSliders();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"colorInputBox\">\r\n            <p>red, green, blue</p>\r\n                {Object.keys(this.inputs).map(e=>\r\n                        <div className=\"colorInputRow\" key={e[0]}>\r\n                        <label htmlFor={`${e}t}`}>{e} \r\n                        <input name={`${e}r`} id={`${e}r`}  type=\"range\" min=\"0\" max={this.inputs[e]} onChange={this.cChange}/>\r\n                        <input type=\"text\" id={`${e}t`} min=\"0\" max={this.inputs[e]} size=\"4\" onInput={this.cChange} onFocus={this.cFocus} onBlur={()=>this.buffer=[]}/>\r\n                        </label>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.setSliders();\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport ColorPreview from './components/ColorPreview';\nimport ColorWheel from './components/ColorWheel';\nimport HslSliders from './components/HslSliders';\nimport ColorPalette from './components/ColorPalette';\nimport './ColorTools.css';\nimport RgbSliders from './components/RgbSliders';\nexport default class ColorTools extends Component {\n  constructor(props) {\n    super (props);\n    this.state = { \n      baseColor:[0,100,50],\n      width:300,\n    };\n  }\n  updateBaseColor = (color) => { \n    if (color === this.state.baseColor) { return; }\n    if (color[0] >= 360) { color[0] = 0 }\n    if (color[1] >= 100) { color[1] = 100 }\n    if (color[2] >= 100) { color[2] = 100 }\n    color.forEach((e,i,a)=>color[i]=Number(e));\n    this.textColor = (color[2]>40) ? \"black\" : \"white\";\n    this.setState({baseColor:color});\n  }\n  render() {\n  return (\n    <div id=\"colorToolsFlexContainer\">\n      <div id=\"colorPickers\" style={{width:this.state.width}}>\n        <ColorPreview updateBaseColor={this.updateBaseColor} state={this.state} />\n        <ColorWheel updateBaseColor={this.updateBaseColor} state={this.state} />\n        <HslSliders updateBaseColor={this.updateBaseColor} state={this.state} />\n        <RgbSliders updateBaseColor={this.updateBaseColor} state={this.state} />\n      </div>\n      <div className=\"colorPalette\">\n        <ColorPalette updateBaseColor={this.updateBaseColor} state={this.state}/>\n      </div>\n    </div>\n  );\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ColorTools from './ColorTools';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<ColorTools />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}